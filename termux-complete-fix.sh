
#!/bin/bash

# MoJiTo-MD Bot - Instalaci√≥n Completa para Termux con Est√©tica Hacker
# Script mejorado con animaciones, gradientes y manejo de se√±ales

# Configurar manejo de se√±ales para evitar cuelgues
trap 'echo -e "\nüö´ Instalaci√≥n cancelada por el usuario"; exit 1' INT TERM

# Colores y efectos para est√©tica hacker
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
GRAY='\033[0;90m'
BOLD='\033[1m'
DIM='\033[2m'
BLINK='\033[5m'
NC='\033[0m' # No Color

# Gradientes ASCII para efecto hacker
GRADIENT1='\033[38;5;196m'  # Rojo intenso
GRADIENT2='\033[38;5;202m'  # Naranja rojo
GRADIENT3='\033[38;5;208m'  # Naranja
GRADIENT4='\033[38;5;214m'  # Naranja amarillo
GRADIENT5='\033[38;5;220m'  # Amarillo
GRADIENT6='\033[38;5;226m'  # Amarillo brillante

# Funci√≥n para limpiar pantalla con efecto
clear_screen() {
    printf "\033c"
    sleep 0.1
}

# Funci√≥n de animaci√≥n de carga
loading_animation() {
    local duration=$1
    local message=$2
    local chars="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
    local i=0
    
    while [ $i -lt $duration ]; do
        for (( j=0; j<${#chars}; j++ )); do
            echo -ne "\r${CYAN}${chars:$j:1} ${message}${NC}"
            sleep 0.1
        done
        ((i++))
    done
    echo ""
}

# Banner de inicio con gradiente
show_hacker_banner() {
    clear_screen
    echo -e "${GRADIENT1}
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ${GRADIENT2}‚ñà‚ñà                                                            ‚ñà‚ñà
    ${GRADIENT3}‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       ‚ñà‚ñà
    ${GRADIENT4}‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó      ‚ñà‚ñà
    ${GRADIENT5}‚ñà‚ñà  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë      ‚ñà‚ñà
    ${GRADIENT6}‚ñà‚ñà  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë      ‚ñà‚ñà
    ${GRADIENT5}‚ñà‚ñà  ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù      ‚ñà‚ñà
    ${GRADIENT4}‚ñà‚ñà  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù       ‚ñà‚ñà
    ${GRADIENT3}‚ñà‚ñà                                                            ‚ñà‚ñà
    ${GRADIENT2}‚ñà‚ñà            TERMUX INSTALLATION SYSTEM                      ‚ñà‚ñà
    ${GRADIENT1}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ${NC}"
    echo ""
    echo -e "${BLINK}${RED}‚ö†Ô∏è  INICIANDO PROTOCOLO DE INSTALACI√ìN HACKER  ‚ö†Ô∏è${NC}"
    echo -e "${DIM}${GRAY}[SISTEMA] Preparando entorno de combate para Termux...${NC}"
    echo ""
    
    # Animaci√≥n de inicializaci√≥n
    echo -e "${YELLOW}${BOLD}‚ñ∫ INICIALIZANDO SISTEMAS...${NC}"
    loading_animation 3 "Escaneando vulnerabilidades del sistema"
    echo -e "${GREEN}‚úì Sistema vulnerable detectado - Procediendo con la infecci√≥n${NC}"
    echo ""
}

# Funci√≥n para mostrar progreso con barra
show_progress() {
    local step=$1
    local total=$2
    local message=$3
    local percent=$((step * 100 / total))
    local filled=$((percent / 2))
    local empty=$((50 - filled))
    
    echo -ne "\r${BOLD}${CYAN}["
    printf "%*s" $filled | tr ' ' '‚ñà'
    printf "%*s" $empty | tr ' ' '‚ñë'
    echo -ne "] ${percent}% ${message}${NC}"
    
    if [ $step -eq $total ]; then
        echo ""
    fi
}

# Funci√≥n para ejecutar comandos con manejo de se√±ales
safe_execute() {
    local command=$1
    local description=$2
    
    echo -e "${YELLOW}${BOLD}‚ñ∫ EJECUTANDO: ${description}${NC}"
    echo -e "${DIM}${GRAY}  CMD: ${command}${NC}"
    
    # Ejecutar comando en background y capturar PID
    eval "$command" &
    local cmd_pid=$!
    
    # Mostrar animaci√≥n mientras el comando se ejecuta
    while kill -0 $cmd_pid 2>/dev/null; do
        echo -ne "\r${CYAN}‚ö° Procesando... ${NC}"
        for i in {1..3}; do
            echo -ne "."
            sleep 0.3
        done
        echo -ne "\r                    \r"
    done
    
    # Esperar a que termine y obtener c√≥digo de salida
    wait $cmd_pid
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}‚úì COMPLETADO: ${description}${NC}"
    else
        echo -e "${RED}‚úó FALL√ì: ${description}${NC}"
        echo -e "${YELLOW}  Continuando con el siguiente paso...${NC}"
    fi
    
    return $exit_code
}

# Funci√≥n principal de instalaci√≥n
main_installation() {
    local total_steps=8
    local current_step=0
    
    # Paso 1: Configurar variables de entorno
    ((current_step++))
    show_progress $current_step $total_steps "Configurando matriz de control"
    sleep 1
    
    export NODE_OPTIONS="--max-old-space-size=512"
    export TERMUX=1
    export TERM=xterm-256color
    export COLORTERM=truecolor
    
    echo -e "${GREEN}‚úì Variables de entorno hackeadas exitosamente${NC}"
    echo ""
    
    # Paso 2: Reparar package.json
    ((current_step++))
    show_progress $current_step $total_steps "Infiltrando package.json"
    
    if [ -f "termux-fix-package.sh" ]; then
        safe_execute "timeout 30 bash termux-fix-package.sh" "Reparaci√≥n de package.json"
    else
        echo -e "${YELLOW}‚ö†Ô∏è termux-fix-package.sh no encontrado, saltando...${NC}"
    fi
    echo ""
    
    # Paso 3: Configurar npm
    ((current_step++))
    show_progress $current_step $total_steps "Comprometiendo NPM"
    
    safe_execute "npm config delete build-from-source 2>/dev/null || true" "Eliminando configuraciones conflictivas"
    safe_execute "npm config delete optional 2>/dev/null || true" "Limpiando configuraci√≥n NPM"
    echo ""
    
    # Paso 4: Limpiar instalaciones previas
    ((current_step++))
    show_progress $current_step $total_steps "Eliminando evidencia previa"
    
    safe_execute "rm -rf node_modules" "Eliminando node_modules"
    safe_execute "rm -rf package-lock.json" "Eliminando package-lock"
    safe_execute "npm cache clean --force" "Limpiando cache NPM"
    echo ""
    
    # Paso 5: Instalar dependencias cr√≠ticas
    ((current_step++))
    show_progress $current_step $total_steps "Inyectando dependencias cr√≠ticas"
    
    echo -e "${RED}${BOLD}‚ö†Ô∏è FASE CR√çTICA - NO INTERRUMPIR ‚ö†Ô∏è${NC}"
    loading_animation 2 "Preparando payload principal"
    
    safe_execute "timeout 180 npm install --omit=optional --ignore-scripts --no-audit --no-fund --force" "Instalaci√≥n de dependencias"
    echo ""
    
    # Paso 6: Verificar Baileys espec√≠ficamente
    ((current_step++))
    show_progress $current_step $total_steps "Verificando conexi√≥n WhatsApp"
    
    if ! npm list @whiskeysockets/baileys >/dev/null 2>&1; then
        safe_execute "timeout 60 npm install @whiskeysockets/baileys@6.7.18 --force" "Instalando Baileys"
    fi
    echo ""
    
    # Paso 7: Verificar archivos cr√≠ticos
    ((current_step++))
    show_progress $current_step $total_steps "Verificando integridad del sistema"
    
    local files_ok=true
    
    if [ -f "start-termux.js" ]; then
        echo -e "${GREEN}‚úì Launcher detectado${NC}"
    else
        echo -e "${RED}‚úó Launcher no encontrado${NC}"
        files_ok=false
    fi
    
    if [ -d "node_modules" ]; then
        echo -e "${GREEN}‚úì M√≥dulos instalados${NC}"
    else
        echo -e "${RED}‚úó M√≥dulos faltantes${NC}"
        files_ok=false
    fi
    
    if [ -f "server/index.js" ] || [ -f "server/index.ts" ]; then
        echo -e "${GREEN}‚úì Servidor encontrado${NC}"
    else
        echo -e "${RED}‚úó Servidor no encontrado${NC}"
        files_ok=false
    fi
    echo ""
    
    # Paso 8: Finalizaci√≥n
    ((current_step++))
    show_progress $current_step $total_steps "Finalizando infiltraci√≥n"
    
    loading_animation 2 "Activando sistemas de combate"
    
    # Banner de √©xito
    clear_screen
    echo -e "${GRADIENT1}
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ${GRADIENT2}‚ñà‚ñà                                                            ‚ñà‚ñà
    ${GRADIENT3}‚ñà‚ñà                   ‚úÖ MISI√ìN COMPLETADA ‚úÖ                  ‚ñà‚ñà
    ${GRADIENT4}‚ñà‚ñà                                                            ‚ñà‚ñà
    ${GRADIENT5}‚ñà‚ñà            MOJITO-MD LISTO PARA EL COMBATE                ‚ñà‚ñà
    ${GRADIENT6}‚ñà‚ñà                                                            ‚ñà‚ñà
    ${GRADIENT5}‚ñà‚ñà  üî• Sistema infiltrado exitosamente                       ‚ñà‚ñà
    ${GRADIENT4}‚ñà‚ñà  ‚ö° Dependencias cargadas                                  ‚ñà‚ñà
    ${GRADIENT3}‚ñà‚ñà  üöÄ Launcher armado y listo                               ‚ñà‚ñà
    ${GRADIENT2}‚ñà‚ñà  üí• Bot preparado para dominar WhatsApp                   ‚ñà‚ñà
    ${GRADIENT1}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ${NC}"
    
    echo ""
    echo -e "${BLINK}${GREEN}üéØ TODOS LOS SISTEMAS OPERATIVOS${NC}"
    echo ""
    echo -e "${BOLD}${YELLOW}üìã COMANDOS DE COMBATE:${NC}"
    echo -e "${CYAN}   üöÄ ${BOLD}node start-termux.js${NC}     - Launcher optimizado"
    echo -e "${CYAN}   ‚ö° ${BOLD}npm run dev${NC}              - Modo desarrollo"
    echo -e "${CYAN}   üîß ${BOLD}node server/index.js${NC}     - Ejecuci√≥n directa"
    echo ""
    
    if [ "$files_ok" = true ]; then
        echo -e "${GREEN}${BOLD}‚úÖ INSTALACI√ìN COMPLETADA - SISTEMA COMPROMETIDO EXITOSAMENTE${NC}"
        echo -e "${YELLOW}üí° Tip: El bot detectar√° autom√°ticamente que est√° en Termux y aplicar√° optimizaciones${NC}"
    else
        echo -e "${RED}${BOLD}‚ö†Ô∏è INSTALACI√ìN CON ADVERTENCIAS - REVISAR LOGS${NC}"
        echo -e "${YELLOW}üí° Algunos componentes pueden faltar, pero el sistema deber√≠a funcionar${NC}"
    fi
    
    echo ""
    echo -e "${DIM}${GRAY}[SISTEMA] Protocolo de instalaci√≥n finalizado - Aguardando √≥rdenes...${NC}"
}

# Verificar que estamos en Termux
if [[ ! "$PREFIX" == *"com.termux"* ]] && [[ ! "$TERMUX_VERSION" ]]; then
    clear_screen
    echo -e "${RED}${BOLD}‚ö†Ô∏è ALERTA DE SEGURIDAD ‚ö†Ô∏è${NC}"
    echo ""
    echo -e "${YELLOW}Este script est√° optimizado espec√≠ficamente para Termux.${NC}"
    echo -e "${CYAN}Detectamos que no est√°s en un entorno Termux.${NC}"
    echo ""
    echo -e "${WHITE}¬øDeseas continuar de todos modos? (y/N):${NC}"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${RED}Instalaci√≥n cancelada por el usuario.${NC}"
        exit 1
    fi
fi

# Ejecutar instalaci√≥n principal
show_hacker_banner
sleep 2
main_installation

# Mensaje final
echo ""
echo -e "${BLINK}${PURPLE}üé≠ MoJiTo-MD Bot - Listo para conquistar WhatsApp üé≠${NC}"
echo ""
